// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerRegistryClient is the client API for CustomerRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerRegistryClient interface {
	New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*NewResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*UpdateInfoRequest, error)
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
}

type customerRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerRegistryClient(cc grpc.ClientConnInterface) CustomerRegistryClient {
	return &customerRegistryClient{cc}
}

func (c *customerRegistryClient) New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*NewResponse, error) {
	out := new(NewResponse)
	err := c.cc.Invoke(ctx, "/CustomerRegistry/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerRegistryClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/CustomerRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerRegistryClient) UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*UpdateInfoRequest, error) {
	out := new(UpdateInfoRequest)
	err := c.cc.Invoke(ctx, "/CustomerRegistry/UpdateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerRegistryClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, "/CustomerRegistry/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerRegistryServer is the server API for CustomerRegistry service.
// All implementations must embed UnimplementedCustomerRegistryServer
// for forward compatibility
type CustomerRegistryServer interface {
	New(context.Context, *NewRequest) (*NewResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	UpdateInfo(context.Context, *UpdateInfoRequest) (*UpdateInfoRequest, error)
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	mustEmbedUnimplementedCustomerRegistryServer()
}

// UnimplementedCustomerRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerRegistryServer struct {
}

func (UnimplementedCustomerRegistryServer) New(context.Context, *NewRequest) (*NewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (UnimplementedCustomerRegistryServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCustomerRegistryServer) UpdateInfo(context.Context, *UpdateInfoRequest) (*UpdateInfoRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfo not implemented")
}
func (UnimplementedCustomerRegistryServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedCustomerRegistryServer) mustEmbedUnimplementedCustomerRegistryServer() {}

// UnsafeCustomerRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerRegistryServer will
// result in compilation errors.
type UnsafeCustomerRegistryServer interface {
	mustEmbedUnimplementedCustomerRegistryServer()
}

func RegisterCustomerRegistryServer(s grpc.ServiceRegistrar, srv CustomerRegistryServer) {
	s.RegisterService(&CustomerRegistry_ServiceDesc, srv)
}

func _CustomerRegistry_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerRegistryServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerRegistry/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerRegistryServer).New(ctx, req.(*NewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerRegistryServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerRegistry_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerRegistryServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerRegistry/UpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerRegistryServer).UpdateInfo(ctx, req.(*UpdateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerRegistry_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerRegistryServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerRegistry/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerRegistryServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerRegistry_ServiceDesc is the grpc.ServiceDesc for CustomerRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CustomerRegistry",
	HandlerType: (*CustomerRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _CustomerRegistry_New_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CustomerRegistry_Get_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _CustomerRegistry_UpdateInfo_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _CustomerRegistry_SetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/customer.proto",
}
