// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.1
// source: pb/customer.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CountryCode int32

const (
	CountryCode_UNKOWN CountryCode = 0   // Not set
	CountryCode_ABW    CountryCode = 1   // Aruba
	CountryCode_AFG    CountryCode = 2   // Afghanistan
	CountryCode_AGO    CountryCode = 3   // Angola
	CountryCode_AIA    CountryCode = 4   // Anguilla
	CountryCode_ALA    CountryCode = 5   // Åland Islands
	CountryCode_ALB    CountryCode = 6   // Albania
	CountryCode_AND    CountryCode = 7   // Andorra
	CountryCode_ANT    CountryCode = 8   // Netherlands Antilles
	CountryCode_ARE    CountryCode = 9   // United Arab Emirates
	CountryCode_ARG    CountryCode = 10  // Argentina
	CountryCode_ARM    CountryCode = 11  // Armenia
	CountryCode_ASM    CountryCode = 12  // American Samoa
	CountryCode_ATA    CountryCode = 13  // Antarctica
	CountryCode_ATF    CountryCode = 14  // French Southern Territories
	CountryCode_ATG    CountryCode = 15  // Antigua and Barbuda
	CountryCode_AUS    CountryCode = 16  // Australia
	CountryCode_AUT    CountryCode = 17  // Austria
	CountryCode_AZE    CountryCode = 18  // Azerbaijan
	CountryCode_BDI    CountryCode = 19  // Burundi
	CountryCode_BEL    CountryCode = 20  // Belgium
	CountryCode_BEN    CountryCode = 21  // Benin
	CountryCode_BFA    CountryCode = 22  // Burkina Faso
	CountryCode_BGD    CountryCode = 23  // Bangladesh
	CountryCode_BGR    CountryCode = 24  // Bulgaria
	CountryCode_BHR    CountryCode = 25  // Bahrain
	CountryCode_BHS    CountryCode = 26  // Bahamas
	CountryCode_BIH    CountryCode = 27  // Bosnia and Herzegovina
	CountryCode_BLM    CountryCode = 28  // Saint Barthélemy
	CountryCode_BLR    CountryCode = 29  // Belarus
	CountryCode_BLZ    CountryCode = 30  // Belize
	CountryCode_BMU    CountryCode = 31  // Bermuda
	CountryCode_BOL    CountryCode = 32  // Bolivia
	CountryCode_BRA    CountryCode = 33  // Brazil
	CountryCode_BRB    CountryCode = 34  // Barbados
	CountryCode_BRN    CountryCode = 35  // Brunei Darussalam
	CountryCode_BTN    CountryCode = 36  // Bhutan
	CountryCode_BVT    CountryCode = 37  // Bouvet Island
	CountryCode_BWA    CountryCode = 38  // Botswana
	CountryCode_CAF    CountryCode = 39  // Central African Republic
	CountryCode_CAN    CountryCode = 40  // Canada
	CountryCode_CCK    CountryCode = 41  // Cocos (Keeling) Islands
	CountryCode_CHE    CountryCode = 42  // Switzerland
	CountryCode_CHL    CountryCode = 43  // Chile
	CountryCode_CHN    CountryCode = 44  // China
	CountryCode_CIV    CountryCode = 45  // Côte d'Ivoire
	CountryCode_CMR    CountryCode = 46  // Cameroon
	CountryCode_COD    CountryCode = 47  // Congo, the Democratic Republic of the
	CountryCode_COG    CountryCode = 48  // Congo
	CountryCode_COK    CountryCode = 49  // Cook Islands
	CountryCode_COL    CountryCode = 50  // Colombia
	CountryCode_COM    CountryCode = 51  // Comoros
	CountryCode_CPV    CountryCode = 52  // Cape Verde
	CountryCode_CRI    CountryCode = 53  // Costa Rica
	CountryCode_CUB    CountryCode = 54  // Cuba
	CountryCode_CXR    CountryCode = 55  // Christmas Island
	CountryCode_CYM    CountryCode = 56  // Cayman Islands
	CountryCode_CYP    CountryCode = 57  // Cyprus
	CountryCode_CZE    CountryCode = 58  // Czechia
	CountryCode_DEU    CountryCode = 59  // Germany
	CountryCode_DJI    CountryCode = 60  // Djibouti
	CountryCode_DMA    CountryCode = 61  // Dominica
	CountryCode_DNK    CountryCode = 62  // Denmark
	CountryCode_DOM    CountryCode = 63  // Dominican Republic
	CountryCode_DZA    CountryCode = 64  // Algeria
	CountryCode_ECU    CountryCode = 65  // Ecuador
	CountryCode_EGY    CountryCode = 66  // Egypt
	CountryCode_ERI    CountryCode = 67  // Eritrea
	CountryCode_ESH    CountryCode = 68  // Western Sahara
	CountryCode_ESP    CountryCode = 69  // Spain
	CountryCode_EST    CountryCode = 70  // Estonia
	CountryCode_ETH    CountryCode = 71  // Ethiopia
	CountryCode_FIN    CountryCode = 72  // Finland
	CountryCode_FJI    CountryCode = 73  // Fiji
	CountryCode_FLK    CountryCode = 74  // Falkland Islands (Malvinas)
	CountryCode_FRA    CountryCode = 75  // France
	CountryCode_FRO    CountryCode = 76  // Faroe Islands
	CountryCode_FSM    CountryCode = 77  // Micronesia, Federated States of
	CountryCode_GAB    CountryCode = 78  // Gabon
	CountryCode_GBR    CountryCode = 79  // United Kingdom
	CountryCode_GEO    CountryCode = 80  // Georgia
	CountryCode_GGY    CountryCode = 81  // Guernsey
	CountryCode_GHA    CountryCode = 82  // Ghana
	CountryCode_GIN    CountryCode = 83  // Guinea
	CountryCode_GIB    CountryCode = 84  // Gibraltar
	CountryCode_GLP    CountryCode = 85  // Guadeloupe
	CountryCode_GMB    CountryCode = 86  // Gambia
	CountryCode_GNB    CountryCode = 87  // Guinea-Bissau
	CountryCode_GNQ    CountryCode = 88  // Equatorial Guinea
	CountryCode_GRC    CountryCode = 89  // Greece
	CountryCode_GRD    CountryCode = 90  // Grenada
	CountryCode_GRL    CountryCode = 91  // Greenland
	CountryCode_GTM    CountryCode = 92  // Guatemala
	CountryCode_GUF    CountryCode = 93  // French Guiana
	CountryCode_GUM    CountryCode = 94  // Guam
	CountryCode_GUY    CountryCode = 95  // Guyana
	CountryCode_HKG    CountryCode = 96  // Hong Kong
	CountryCode_HMD    CountryCode = 97  // Heard Island and McDonald Islands
	CountryCode_HND    CountryCode = 98  // Honduras
	CountryCode_HRV    CountryCode = 99  // Croatia
	CountryCode_HTI    CountryCode = 100 // Haiti
	CountryCode_HUN    CountryCode = 101 // Hungary
	CountryCode_IDN    CountryCode = 102 // Indonesia
	CountryCode_IMN    CountryCode = 103 // Isle of Man
	CountryCode_IND    CountryCode = 104 // India
	CountryCode_IOT    CountryCode = 105 // British Indian Ocean Territory
	CountryCode_IRL    CountryCode = 106 // Ireland
	CountryCode_IRN    CountryCode = 107 // Iran, Islamic Republic of
	CountryCode_IRQ    CountryCode = 108 // Iraq
	CountryCode_ISL    CountryCode = 109 // Iceland
	CountryCode_ISR    CountryCode = 110 // Israel
	CountryCode_ITA    CountryCode = 111 // Italy
	CountryCode_JAM    CountryCode = 112 // Jamaica
	CountryCode_JEY    CountryCode = 113 // Jersey
	CountryCode_JOR    CountryCode = 114 // Jordan
	CountryCode_JPN    CountryCode = 115 // Japan
	CountryCode_KAZ    CountryCode = 116 // Kazakhstan
	CountryCode_KEN    CountryCode = 117 // Kenya
	CountryCode_KGZ    CountryCode = 118 // Kyrgyzstan
	CountryCode_KHM    CountryCode = 119 // Cambodia
	CountryCode_KIR    CountryCode = 120 // Kiribati
	CountryCode_KNA    CountryCode = 121 // Saint Kitts and Nevis
	CountryCode_KOR    CountryCode = 122 // Korea, Republic of
	CountryCode_KWT    CountryCode = 123 // Kuwait
	CountryCode_LAO    CountryCode = 124 // Lao People's Democratic Republic
	CountryCode_LBN    CountryCode = 125 // Lebanon
	CountryCode_LBR    CountryCode = 126 // Liberia
	CountryCode_LBY    CountryCode = 127 // Libyan Arab Jamahiriya
	CountryCode_LCA    CountryCode = 128 // Saint Lucia
	CountryCode_LIE    CountryCode = 129 // Liechtenstein
	CountryCode_LKA    CountryCode = 130 // Sri Lanka
	CountryCode_LSO    CountryCode = 131 // Lesotho
	CountryCode_LTU    CountryCode = 132 // Lithuania
	CountryCode_LUX    CountryCode = 133 // Luxembourg
	CountryCode_LVA    CountryCode = 134 // Latvia
	CountryCode_MAC    CountryCode = 135 // Macao
	CountryCode_MAF    CountryCode = 136 // Saint Martin (French part)
	CountryCode_MAR    CountryCode = 137 // Morocco
	CountryCode_MCO    CountryCode = 138 // Monaco
	CountryCode_MDA    CountryCode = 139 // Moldova, Republic of
	CountryCode_MDG    CountryCode = 140 // Madagascar
	CountryCode_MDV    CountryCode = 141 // Maldives
	CountryCode_MEX    CountryCode = 142 // Mexico
	CountryCode_MHL    CountryCode = 143 // Marshall Islands
	CountryCode_MKD    CountryCode = 144 // Macedonia, the former Yugoslav Republic of
	CountryCode_MLI    CountryCode = 145 // Mali
	CountryCode_MLT    CountryCode = 146 // Malta
	CountryCode_MMR    CountryCode = 147 // Myanmar
	CountryCode_MNE    CountryCode = 148 // Montenegro
	CountryCode_MNG    CountryCode = 149 // Mongolia
	CountryCode_MNP    CountryCode = 150 // Northern Mariana Islands
	CountryCode_MOZ    CountryCode = 151 // Mozambique
	CountryCode_MRT    CountryCode = 152 // Mauritania
	CountryCode_MSR    CountryCode = 153 // Montserrat
	CountryCode_MTQ    CountryCode = 154 // Martinique
	CountryCode_MUS    CountryCode = 155 // Mauritius
	CountryCode_MWI    CountryCode = 156 // Malawi
	CountryCode_MYS    CountryCode = 157 // Malaysia
	CountryCode_MYT    CountryCode = 158 // Mayotte
	CountryCode_NAM    CountryCode = 159 // Namibia
	CountryCode_NCL    CountryCode = 160 // New Caledonia
	CountryCode_NER    CountryCode = 161 // Niger
	CountryCode_NFK    CountryCode = 162 // Norfolk Island
	CountryCode_NGA    CountryCode = 163 // Nigeria
	CountryCode_NIC    CountryCode = 164 // Nicaragua
	CountryCode_NOR    CountryCode = 165 // Norway
	CountryCode_NIU    CountryCode = 166 // Niue
	CountryCode_NLD    CountryCode = 167 // Netherlands
	CountryCode_NPL    CountryCode = 168 // Nepal
	CountryCode_NRU    CountryCode = 169 // Nauru
	CountryCode_NZL    CountryCode = 170 // New Zealand
	CountryCode_OMN    CountryCode = 171 // Oman
	CountryCode_PAK    CountryCode = 172 // Pakistan
	CountryCode_PAN    CountryCode = 173 // Panama
	CountryCode_PCN    CountryCode = 174 // Pitcairn
	CountryCode_PER    CountryCode = 175 // Peru
	CountryCode_PHL    CountryCode = 176 // Philippines
	CountryCode_PLW    CountryCode = 177 // Palau
	CountryCode_PNG    CountryCode = 178 // Papua New Guinea
	CountryCode_POL    CountryCode = 179 // Poland
	CountryCode_PRI    CountryCode = 180 // Puerto Rico
	CountryCode_PRK    CountryCode = 181 // Korea, Democratic People's Republic of
	CountryCode_PRT    CountryCode = 182 // Portugal
	CountryCode_PRY    CountryCode = 183 // Paraguay
	CountryCode_PSE    CountryCode = 184 // Palestinian Territory, Occupied
	CountryCode_PYF    CountryCode = 185 // French Polynesia
	CountryCode_QAT    CountryCode = 186 // Qatar
	CountryCode_REU    CountryCode = 187 // Réunion
	CountryCode_ROU    CountryCode = 188 // Romania
	CountryCode_RUS    CountryCode = 189 // Russian Federation
	CountryCode_RWA    CountryCode = 190 // Rwanda
	CountryCode_SAU    CountryCode = 191 // Saudi Arabia
	CountryCode_SDN    CountryCode = 192 // Sudan
	CountryCode_SEN    CountryCode = 193 // Senegal
	CountryCode_SGP    CountryCode = 194 // Singapore
	CountryCode_SGS    CountryCode = 195 // South Georgia and the South Sandwich Islands
	CountryCode_SHN    CountryCode = 196 // Saint Helena
	CountryCode_SJM    CountryCode = 197 // Svalbard and Jan Mayen
	CountryCode_SLB    CountryCode = 198 // Solomon Islands
	CountryCode_SLE    CountryCode = 199 // Sierra Leone
	CountryCode_SLV    CountryCode = 200 // El Salvador
	CountryCode_SMR    CountryCode = 201 // San Marino
	CountryCode_SOM    CountryCode = 202 // Somalia
	CountryCode_SPM    CountryCode = 203 // Saint Pierre and Miquelon
	CountryCode_SRB    CountryCode = 204 // Serbia
	CountryCode_STP    CountryCode = 205 // São Tomé and Príncipe
	CountryCode_SUR    CountryCode = 206 // Suriname
	CountryCode_SVK    CountryCode = 207 // Slovakia
	CountryCode_SVN    CountryCode = 208 // Slovenia
	CountryCode_SWE    CountryCode = 209 // Sweden
	CountryCode_SWZ    CountryCode = 210 // Swaziland
	CountryCode_SYC    CountryCode = 211 // Seychelles
	CountryCode_SYR    CountryCode = 212 // Syrian Arab Republic
	CountryCode_TCA    CountryCode = 213 // Turks and Caicos Islands
	CountryCode_TCD    CountryCode = 214 // Chad
	CountryCode_TGO    CountryCode = 215 // Togo
	CountryCode_THA    CountryCode = 216 // Thailand
	CountryCode_TJK    CountryCode = 217 // Tajikistan
	CountryCode_TKL    CountryCode = 218 // Tokelau
	CountryCode_TKM    CountryCode = 219 // Turkmenistan
	CountryCode_TLS    CountryCode = 220 // Timor-Leste
	CountryCode_TON    CountryCode = 221 // Tonga
	CountryCode_TTO    CountryCode = 222 // Trinidad and Tobago
	CountryCode_TUN    CountryCode = 223 // Tunisia
	CountryCode_TUR    CountryCode = 224 // Turkey
	CountryCode_TUV    CountryCode = 225 // Tuvalu
	CountryCode_TWN    CountryCode = 226 // Taiwan, Province of China
	CountryCode_TZA    CountryCode = 227 // Tanzania, United Republic of
	CountryCode_UGA    CountryCode = 228 // Uganda
	CountryCode_UKR    CountryCode = 229 // Ukraine
	CountryCode_UMI    CountryCode = 230 // United States Minor Outlying Islands
	CountryCode_URY    CountryCode = 231 // Uruguay
	CountryCode_USA    CountryCode = 232 // United States
	CountryCode_UZB    CountryCode = 233 // Uzbekistan
	CountryCode_VAT    CountryCode = 234 // Holy See (Vatican City State)
	CountryCode_VCT    CountryCode = 235 // Saint Vincent and the Grenadines
	CountryCode_VEN    CountryCode = 236 // Venezuela
	CountryCode_VGB    CountryCode = 237 // Virgin Islands, British
	CountryCode_VIR    CountryCode = 238 // Virgin Islands, U.S.
	CountryCode_VNM    CountryCode = 239 // Viet Nam
	CountryCode_VUT    CountryCode = 240 // Vanuatu
	CountryCode_WLF    CountryCode = 241 // Wallis and Futuna
	CountryCode_WSM    CountryCode = 242 // Samoa
	CountryCode_YEM    CountryCode = 243 // Yemen
	CountryCode_ZAF    CountryCode = 244 // South Africa
	CountryCode_ZMB    CountryCode = 245 // Zambia
	CountryCode_ZWE    CountryCode = 246 // Zimbabwe
)

// Enum value maps for CountryCode.
var (
	CountryCode_name = map[int32]string{
		0:   "UNKOWN",
		1:   "ABW",
		2:   "AFG",
		3:   "AGO",
		4:   "AIA",
		5:   "ALA",
		6:   "ALB",
		7:   "AND",
		8:   "ANT",
		9:   "ARE",
		10:  "ARG",
		11:  "ARM",
		12:  "ASM",
		13:  "ATA",
		14:  "ATF",
		15:  "ATG",
		16:  "AUS",
		17:  "AUT",
		18:  "AZE",
		19:  "BDI",
		20:  "BEL",
		21:  "BEN",
		22:  "BFA",
		23:  "BGD",
		24:  "BGR",
		25:  "BHR",
		26:  "BHS",
		27:  "BIH",
		28:  "BLM",
		29:  "BLR",
		30:  "BLZ",
		31:  "BMU",
		32:  "BOL",
		33:  "BRA",
		34:  "BRB",
		35:  "BRN",
		36:  "BTN",
		37:  "BVT",
		38:  "BWA",
		39:  "CAF",
		40:  "CAN",
		41:  "CCK",
		42:  "CHE",
		43:  "CHL",
		44:  "CHN",
		45:  "CIV",
		46:  "CMR",
		47:  "COD",
		48:  "COG",
		49:  "COK",
		50:  "COL",
		51:  "COM",
		52:  "CPV",
		53:  "CRI",
		54:  "CUB",
		55:  "CXR",
		56:  "CYM",
		57:  "CYP",
		58:  "CZE",
		59:  "DEU",
		60:  "DJI",
		61:  "DMA",
		62:  "DNK",
		63:  "DOM",
		64:  "DZA",
		65:  "ECU",
		66:  "EGY",
		67:  "ERI",
		68:  "ESH",
		69:  "ESP",
		70:  "EST",
		71:  "ETH",
		72:  "FIN",
		73:  "FJI",
		74:  "FLK",
		75:  "FRA",
		76:  "FRO",
		77:  "FSM",
		78:  "GAB",
		79:  "GBR",
		80:  "GEO",
		81:  "GGY",
		82:  "GHA",
		83:  "GIN",
		84:  "GIB",
		85:  "GLP",
		86:  "GMB",
		87:  "GNB",
		88:  "GNQ",
		89:  "GRC",
		90:  "GRD",
		91:  "GRL",
		92:  "GTM",
		93:  "GUF",
		94:  "GUM",
		95:  "GUY",
		96:  "HKG",
		97:  "HMD",
		98:  "HND",
		99:  "HRV",
		100: "HTI",
		101: "HUN",
		102: "IDN",
		103: "IMN",
		104: "IND",
		105: "IOT",
		106: "IRL",
		107: "IRN",
		108: "IRQ",
		109: "ISL",
		110: "ISR",
		111: "ITA",
		112: "JAM",
		113: "JEY",
		114: "JOR",
		115: "JPN",
		116: "KAZ",
		117: "KEN",
		118: "KGZ",
		119: "KHM",
		120: "KIR",
		121: "KNA",
		122: "KOR",
		123: "KWT",
		124: "LAO",
		125: "LBN",
		126: "LBR",
		127: "LBY",
		128: "LCA",
		129: "LIE",
		130: "LKA",
		131: "LSO",
		132: "LTU",
		133: "LUX",
		134: "LVA",
		135: "MAC",
		136: "MAF",
		137: "MAR",
		138: "MCO",
		139: "MDA",
		140: "MDG",
		141: "MDV",
		142: "MEX",
		143: "MHL",
		144: "MKD",
		145: "MLI",
		146: "MLT",
		147: "MMR",
		148: "MNE",
		149: "MNG",
		150: "MNP",
		151: "MOZ",
		152: "MRT",
		153: "MSR",
		154: "MTQ",
		155: "MUS",
		156: "MWI",
		157: "MYS",
		158: "MYT",
		159: "NAM",
		160: "NCL",
		161: "NER",
		162: "NFK",
		163: "NGA",
		164: "NIC",
		165: "NOR",
		166: "NIU",
		167: "NLD",
		168: "NPL",
		169: "NRU",
		170: "NZL",
		171: "OMN",
		172: "PAK",
		173: "PAN",
		174: "PCN",
		175: "PER",
		176: "PHL",
		177: "PLW",
		178: "PNG",
		179: "POL",
		180: "PRI",
		181: "PRK",
		182: "PRT",
		183: "PRY",
		184: "PSE",
		185: "PYF",
		186: "QAT",
		187: "REU",
		188: "ROU",
		189: "RUS",
		190: "RWA",
		191: "SAU",
		192: "SDN",
		193: "SEN",
		194: "SGP",
		195: "SGS",
		196: "SHN",
		197: "SJM",
		198: "SLB",
		199: "SLE",
		200: "SLV",
		201: "SMR",
		202: "SOM",
		203: "SPM",
		204: "SRB",
		205: "STP",
		206: "SUR",
		207: "SVK",
		208: "SVN",
		209: "SWE",
		210: "SWZ",
		211: "SYC",
		212: "SYR",
		213: "TCA",
		214: "TCD",
		215: "TGO",
		216: "THA",
		217: "TJK",
		218: "TKL",
		219: "TKM",
		220: "TLS",
		221: "TON",
		222: "TTO",
		223: "TUN",
		224: "TUR",
		225: "TUV",
		226: "TWN",
		227: "TZA",
		228: "UGA",
		229: "UKR",
		230: "UMI",
		231: "URY",
		232: "USA",
		233: "UZB",
		234: "VAT",
		235: "VCT",
		236: "VEN",
		237: "VGB",
		238: "VIR",
		239: "VNM",
		240: "VUT",
		241: "WLF",
		242: "WSM",
		243: "YEM",
		244: "ZAF",
		245: "ZMB",
		246: "ZWE",
	}
	CountryCode_value = map[string]int32{
		"UNKOWN": 0,
		"ABW":    1,
		"AFG":    2,
		"AGO":    3,
		"AIA":    4,
		"ALA":    5,
		"ALB":    6,
		"AND":    7,
		"ANT":    8,
		"ARE":    9,
		"ARG":    10,
		"ARM":    11,
		"ASM":    12,
		"ATA":    13,
		"ATF":    14,
		"ATG":    15,
		"AUS":    16,
		"AUT":    17,
		"AZE":    18,
		"BDI":    19,
		"BEL":    20,
		"BEN":    21,
		"BFA":    22,
		"BGD":    23,
		"BGR":    24,
		"BHR":    25,
		"BHS":    26,
		"BIH":    27,
		"BLM":    28,
		"BLR":    29,
		"BLZ":    30,
		"BMU":    31,
		"BOL":    32,
		"BRA":    33,
		"BRB":    34,
		"BRN":    35,
		"BTN":    36,
		"BVT":    37,
		"BWA":    38,
		"CAF":    39,
		"CAN":    40,
		"CCK":    41,
		"CHE":    42,
		"CHL":    43,
		"CHN":    44,
		"CIV":    45,
		"CMR":    46,
		"COD":    47,
		"COG":    48,
		"COK":    49,
		"COL":    50,
		"COM":    51,
		"CPV":    52,
		"CRI":    53,
		"CUB":    54,
		"CXR":    55,
		"CYM":    56,
		"CYP":    57,
		"CZE":    58,
		"DEU":    59,
		"DJI":    60,
		"DMA":    61,
		"DNK":    62,
		"DOM":    63,
		"DZA":    64,
		"ECU":    65,
		"EGY":    66,
		"ERI":    67,
		"ESH":    68,
		"ESP":    69,
		"EST":    70,
		"ETH":    71,
		"FIN":    72,
		"FJI":    73,
		"FLK":    74,
		"FRA":    75,
		"FRO":    76,
		"FSM":    77,
		"GAB":    78,
		"GBR":    79,
		"GEO":    80,
		"GGY":    81,
		"GHA":    82,
		"GIN":    83,
		"GIB":    84,
		"GLP":    85,
		"GMB":    86,
		"GNB":    87,
		"GNQ":    88,
		"GRC":    89,
		"GRD":    90,
		"GRL":    91,
		"GTM":    92,
		"GUF":    93,
		"GUM":    94,
		"GUY":    95,
		"HKG":    96,
		"HMD":    97,
		"HND":    98,
		"HRV":    99,
		"HTI":    100,
		"HUN":    101,
		"IDN":    102,
		"IMN":    103,
		"IND":    104,
		"IOT":    105,
		"IRL":    106,
		"IRN":    107,
		"IRQ":    108,
		"ISL":    109,
		"ISR":    110,
		"ITA":    111,
		"JAM":    112,
		"JEY":    113,
		"JOR":    114,
		"JPN":    115,
		"KAZ":    116,
		"KEN":    117,
		"KGZ":    118,
		"KHM":    119,
		"KIR":    120,
		"KNA":    121,
		"KOR":    122,
		"KWT":    123,
		"LAO":    124,
		"LBN":    125,
		"LBR":    126,
		"LBY":    127,
		"LCA":    128,
		"LIE":    129,
		"LKA":    130,
		"LSO":    131,
		"LTU":    132,
		"LUX":    133,
		"LVA":    134,
		"MAC":    135,
		"MAF":    136,
		"MAR":    137,
		"MCO":    138,
		"MDA":    139,
		"MDG":    140,
		"MDV":    141,
		"MEX":    142,
		"MHL":    143,
		"MKD":    144,
		"MLI":    145,
		"MLT":    146,
		"MMR":    147,
		"MNE":    148,
		"MNG":    149,
		"MNP":    150,
		"MOZ":    151,
		"MRT":    152,
		"MSR":    153,
		"MTQ":    154,
		"MUS":    155,
		"MWI":    156,
		"MYS":    157,
		"MYT":    158,
		"NAM":    159,
		"NCL":    160,
		"NER":    161,
		"NFK":    162,
		"NGA":    163,
		"NIC":    164,
		"NOR":    165,
		"NIU":    166,
		"NLD":    167,
		"NPL":    168,
		"NRU":    169,
		"NZL":    170,
		"OMN":    171,
		"PAK":    172,
		"PAN":    173,
		"PCN":    174,
		"PER":    175,
		"PHL":    176,
		"PLW":    177,
		"PNG":    178,
		"POL":    179,
		"PRI":    180,
		"PRK":    181,
		"PRT":    182,
		"PRY":    183,
		"PSE":    184,
		"PYF":    185,
		"QAT":    186,
		"REU":    187,
		"ROU":    188,
		"RUS":    189,
		"RWA":    190,
		"SAU":    191,
		"SDN":    192,
		"SEN":    193,
		"SGP":    194,
		"SGS":    195,
		"SHN":    196,
		"SJM":    197,
		"SLB":    198,
		"SLE":    199,
		"SLV":    200,
		"SMR":    201,
		"SOM":    202,
		"SPM":    203,
		"SRB":    204,
		"STP":    205,
		"SUR":    206,
		"SVK":    207,
		"SVN":    208,
		"SWE":    209,
		"SWZ":    210,
		"SYC":    211,
		"SYR":    212,
		"TCA":    213,
		"TCD":    214,
		"TGO":    215,
		"THA":    216,
		"TJK":    217,
		"TKL":    218,
		"TKM":    219,
		"TLS":    220,
		"TON":    221,
		"TTO":    222,
		"TUN":    223,
		"TUR":    224,
		"TUV":    225,
		"TWN":    226,
		"TZA":    227,
		"UGA":    228,
		"UKR":    229,
		"UMI":    230,
		"URY":    231,
		"USA":    232,
		"UZB":    233,
		"VAT":    234,
		"VCT":    235,
		"VEN":    236,
		"VGB":    237,
		"VIR":    238,
		"VNM":    239,
		"VUT":    240,
		"WLF":    241,
		"WSM":    242,
		"YEM":    243,
		"ZAF":    244,
		"ZMB":    245,
		"ZWE":    246,
	}
)

func (x CountryCode) Enum() *CountryCode {
	p := new(CountryCode)
	*p = x
	return p
}

func (x CountryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_customer_proto_enumTypes[0].Descriptor()
}

func (CountryCode) Type() protoreflect.EnumType {
	return &file_pb_customer_proto_enumTypes[0]
}

func (x CountryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CountryCode.Descriptor instead.
func (CountryCode) EnumDescriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{0}
}

type ContactInfo_ContactType int32

const (
	ContactInfo_OTHER  ContactInfo_ContactType = 0
	ContactInfo_MOBILE ContactInfo_ContactType = 1
	ContactInfo_PHONE  ContactInfo_ContactType = 2
	ContactInfo_EMAIL  ContactInfo_ContactType = 3
)

// Enum value maps for ContactInfo_ContactType.
var (
	ContactInfo_ContactType_name = map[int32]string{
		0: "OTHER",
		1: "MOBILE",
		2: "PHONE",
		3: "EMAIL",
	}
	ContactInfo_ContactType_value = map[string]int32{
		"OTHER":  0,
		"MOBILE": 1,
		"PHONE":  2,
		"EMAIL":  3,
	}
)

func (x ContactInfo_ContactType) Enum() *ContactInfo_ContactType {
	p := new(ContactInfo_ContactType)
	*p = x
	return p
}

func (x ContactInfo_ContactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactInfo_ContactType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_customer_proto_enumTypes[1].Descriptor()
}

func (ContactInfo_ContactType) Type() protoreflect.EnumType {
	return &file_pb_customer_proto_enumTypes[1]
}

func (x ContactInfo_ContactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactInfo_ContactType.Descriptor instead.
func (ContactInfo_ContactType) EnumDescriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{11, 0}
}

type NewCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CustomerInfo:
	//	*NewCustomerRequest_PersonInfo
	//	*NewCustomerRequest_OrganizationInfo
	CustomerInfo isNewCustomerRequest_CustomerInfo `protobuf_oneof:"customer_info"`
}

func (x *NewCustomerRequest) Reset() {
	*x = NewCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_customer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCustomerRequest) ProtoMessage() {}

func (x *NewCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_customer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCustomerRequest.ProtoReflect.Descriptor instead.
func (*NewCustomerRequest) Descriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{0}
}

func (m *NewCustomerRequest) GetCustomerInfo() isNewCustomerRequest_CustomerInfo {
	if m != nil {
		return m.CustomerInfo
	}
	return nil
}

func (x *NewCustomerRequest) GetPersonInfo() *PersonInfo {
	if x, ok := x.GetCustomerInfo().(*NewCustomerRequest_PersonInfo); ok {
		return x.PersonInfo
	}
	return nil
}

func (x *NewCustomerRequest) GetOrganizationInfo() *OrganizationInfo {
	if x, ok := x.GetCustomerInfo().(*NewCustomerRequest_OrganizationInfo); ok {
		return x.OrganizationInfo
	}
	return nil
}

type isNewCustomerRequest_CustomerInfo interface {
	isNewCustomerRequest_CustomerInfo()
}

type NewCustomerRequest_PersonInfo struct {
	PersonInfo *PersonInfo `protobuf:"bytes,1,opt,name=person_info,json=personInfo,proto3,oneof"`
}

type NewCustomerRequest_OrganizationInfo struct {
	OrganizationInfo *OrganizationInfo `protobuf:"bytes,2,opt,name=organization_info,json=organizationInfo,proto3,oneof"`
}

func (*NewCustomerRequest_PersonInfo) isNewCustomerRequest_CustomerInfo() {}

func (*NewCustomerRequest_OrganizationInfo) isNewCustomerRequest_CustomerInfo() {}

type NewCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to CustomerInfo:
	//	*NewCustomerResponse_PersonInfo
	//	*NewCustomerResponse_OrganizationInfo
	CustomerInfo isNewCustomerResponse_CustomerInfo `protobuf_oneof:"customer_info"`
}

func (x *NewCustomerResponse) Reset() {
	*x = NewCustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_customer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCustomerResponse) ProtoMessage() {}

func (x *NewCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_customer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCustomerResponse.ProtoReflect.Descriptor instead.
func (*NewCustomerResponse) Descriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{1}
}

func (x *NewCustomerResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *NewCustomerResponse) GetCustomerInfo() isNewCustomerResponse_CustomerInfo {
	if m != nil {
		return m.CustomerInfo
	}
	return nil
}

func (x *NewCustomerResponse) GetPersonInfo() *PersonInfo {
	if x, ok := x.GetCustomerInfo().(*NewCustomerResponse_PersonInfo); ok {
		return x.PersonInfo
	}
	return nil
}

func (x *NewCustomerResponse) GetOrganizationInfo() *OrganizationInfo {
	if x, ok := x.GetCustomerInfo().(*NewCustomerResponse_OrganizationInfo); ok {
		return x.OrganizationInfo
	}
	return nil
}

type isNewCustomerResponse_CustomerInfo interface {
	isNewCustomerResponse_CustomerInfo()
}

type NewCustomerResponse_PersonInfo struct {
	PersonInfo *PersonInfo `protobuf:"bytes,2,opt,name=person_info,json=personInfo,proto3,oneof"`
}

type NewCustomerResponse_OrganizationInfo struct {
	OrganizationInfo *OrganizationInfo `protobuf:"bytes,3,opt,name=organization_info,json=organizationInfo,proto3,oneof"`
}

func (*NewCustomerResponse_PersonInfo) isNewCustomerResponse_CustomerInfo() {}

func (*NewCustomerResponse_OrganizationInfo) isNewCustomerResponse_CustomerInfo() {}

type GetCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCustomerRequest) Reset() {
	*x = GetCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_customer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerRequest) ProtoMessage() {}

func (x *GetCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_customer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerRequest) Descriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{2}
}

func (x *GetCustomerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to CustomerInfo:
	//	*GetCustomerResponse_PersonInfo
	//	*GetCustomerResponse_OrganizationInfo
	CustomerInfo isGetCustomerResponse_CustomerInfo `protobuf_oneof:"customer_info"`
}

func (x *GetCustomerResponse) Reset() {
	*x = GetCustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_customer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerResponse) ProtoMessage() {}

func (x *GetCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_customer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerResponse) Descriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{3}
}

func (x *GetCustomerResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *GetCustomerResponse) GetCustomerInfo() isGetCustomerResponse_CustomerInfo {
	if m != nil {
		return m.CustomerInfo
	}
	return nil
}

func (x *GetCustomerResponse) GetPersonInfo() *PersonInfo {
	if x, ok := x.GetCustomerInfo().(*GetCustomerResponse_PersonInfo); ok {
		return x.PersonInfo
	}
	return nil
}

func (x *GetCustomerResponse) GetOrganizationInfo() *OrganizationInfo {
	if x, ok := x.GetCustomerInfo().(*GetCustomerResponse_OrganizationInfo); ok {
		return x.OrganizationInfo
	}
	return nil
}

type isGetCustomerResponse_CustomerInfo interface {
	isGetCustomerResponse_CustomerInfo()
}

type GetCustomerResponse_PersonInfo struct {
	PersonInfo *PersonInfo `protobuf:"bytes,2,opt,name=person_info,json=personInfo,proto3,oneof"`
}

type GetCustomerResponse_OrganizationInfo struct {
	OrganizationInfo *OrganizationInfo `protobuf:"bytes,3,opt,name=organization_info,json=organizationInfo,proto3,oneof"`
}

func (*GetCustomerResponse_PersonInfo) isGetCustomerResponse_CustomerInfo() {}

func (*GetCustomerResponse_OrganizationInfo) isGetCustomerResponse_CustomerInfo() {}

type UpdateCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Customer:
	//	*UpdateCustomerRequest_PersonInfo
	//	*UpdateCustomerRequest_OrganizationInfo
	Customer isUpdateCustomerRequest_Customer `protobuf_oneof:"customer"`
}

func (x *UpdateCustomerRequest) Reset() {
	*x = UpdateCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_customer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerRequest) ProtoMessage() {}

func (x *UpdateCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_customer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomerRequest) Descriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCustomerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *UpdateCustomerRequest) GetCustomer() isUpdateCustomerRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *UpdateCustomerRequest) GetPersonInfo() *PersonInfo {
	if x, ok := x.GetCustomer().(*UpdateCustomerRequest_PersonInfo); ok {
		return x.PersonInfo
	}
	return nil
}

func (x *UpdateCustomerRequest) GetOrganizationInfo() *OrganizationInfo {
	if x, ok := x.GetCustomer().(*UpdateCustomerRequest_OrganizationInfo); ok {
		return x.OrganizationInfo
	}
	return nil
}

type isUpdateCustomerRequest_Customer interface {
	isUpdateCustomerRequest_Customer()
}

type UpdateCustomerRequest_PersonInfo struct {
	PersonInfo *PersonInfo `protobuf:"bytes,2,opt,name=person_info,json=personInfo,proto3,oneof"`
}

type UpdateCustomerRequest_OrganizationInfo struct {
	OrganizationInfo *OrganizationInfo `protobuf:"bytes,3,opt,name=organization_info,json=organizationInfo,proto3,oneof"`
}

func (*UpdateCustomerRequest_PersonInfo) isUpdateCustomerRequest_Customer() {}

func (*UpdateCustomerRequest_OrganizationInfo) isUpdateCustomerRequest_Customer() {}

type UpdateCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to CustomerInfo:
	//	*UpdateCustomerResponse_PersonInfo
	//	*UpdateCustomerResponse_OrganizationInfo
	CustomerInfo isUpdateCustomerResponse_CustomerInfo `protobuf_oneof:"customer_info"`
}

func (x *UpdateCustomerResponse) Reset() {
	*x = UpdateCustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_customer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerResponse) ProtoMessage() {}

func (x *UpdateCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_customer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerResponse.ProtoReflect.Descriptor instead.
func (*UpdateCustomerResponse) Descriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCustomerResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *UpdateCustomerResponse) GetCustomerInfo() isUpdateCustomerResponse_CustomerInfo {
	if m != nil {
		return m.CustomerInfo
	}
	return nil
}

func (x *UpdateCustomerResponse) GetPersonInfo() *PersonInfo {
	if x, ok := x.GetCustomerInfo().(*UpdateCustomerResponse_PersonInfo); ok {
		return x.PersonInfo
	}
	return nil
}

func (x *UpdateCustomerResponse) GetOrganizationInfo() *OrganizationInfo {
	if x, ok := x.GetCustomerInfo().(*UpdateCustomerResponse_OrganizationInfo); ok {
		return x.OrganizationInfo
	}
	return nil
}

type isUpdateCustomerResponse_CustomerInfo interface {
	isUpdateCustomerResponse_CustomerInfo()
}

type UpdateCustomerResponse_PersonInfo struct {
	PersonInfo *PersonInfo `protobuf:"bytes,2,opt,name=person_info,json=personInfo,proto3,oneof"`
}

type UpdateCustomerResponse_OrganizationInfo struct {
	OrganizationInfo *OrganizationInfo `protobuf:"bytes,3,opt,name=organization_info,json=organizationInfo,proto3,oneof"`
}

func (*UpdateCustomerResponse_PersonInfo) isUpdateCustomerResponse_CustomerInfo() {}

func (*UpdateCustomerResponse_OrganizationInfo) isUpdateCustomerResponse_CustomerInfo() {}

type DeleteCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCustomerRequest) Reset() {
	*x = DeleteCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_customer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomerRequest) ProtoMessage() {}

func (x *DeleteCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_customer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomerRequest.ProtoReflect.Descriptor instead.
func (*DeleteCustomerRequest) Descriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCustomerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeleteCustomerResponse) Reset() {
	*x = DeleteCustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_customer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomerResponse) ProtoMessage() {}

func (x *DeleteCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_customer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomerResponse.ProtoReflect.Descriptor instead.
func (*DeleteCustomerResponse) Descriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteCustomerResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PersonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GivenName   string      `protobuf:"bytes,1,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	FamilyName  string      `protobuf:"bytes,2,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	Ssn         string      `protobuf:"bytes,3,opt,name=ssn,proto3" json:"ssn,omitempty"`
	DateOfBirth string      `protobuf:"bytes,4,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	Citizenship CountryCode `protobuf:"varint,5,opt,name=citizenship,proto3,enum=CountryCode" json:"citizenship,omitempty"`
}

func (x *PersonInfo) Reset() {
	*x = PersonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_customer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonInfo) ProtoMessage() {}

func (x *PersonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_customer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonInfo.ProtoReflect.Descriptor instead.
func (*PersonInfo) Descriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{8}
}

func (x *PersonInfo) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *PersonInfo) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *PersonInfo) GetSsn() string {
	if x != nil {
		return x.Ssn
	}
	return ""
}

func (x *PersonInfo) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *PersonInfo) GetCitizenship() CountryCode {
	if x != nil {
		return x.Citizenship
	}
	return CountryCode_UNKOWN
}

type OrganizationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Form                string      `protobuf:"bytes,2,opt,name=form,proto3" json:"form,omitempty"`
	LegalId             string      `protobuf:"bytes,3,opt,name=legal_id,json=legalId,proto3" json:"legal_id,omitempty"`
	DateOfRegistration  string      `protobuf:"bytes,4,opt,name=date_of_registration,json=dateOfRegistration,proto3" json:"date_of_registration,omitempty"`
	RegistrationCountry CountryCode `protobuf:"varint,5,opt,name=registration_country,json=registrationCountry,proto3,enum=CountryCode" json:"registration_country,omitempty"`
}

func (x *OrganizationInfo) Reset() {
	*x = OrganizationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_customer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationInfo) ProtoMessage() {}

func (x *OrganizationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_customer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationInfo.ProtoReflect.Descriptor instead.
func (*OrganizationInfo) Descriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{9}
}

func (x *OrganizationInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrganizationInfo) GetForm() string {
	if x != nil {
		return x.Form
	}
	return ""
}

func (x *OrganizationInfo) GetLegalId() string {
	if x != nil {
		return x.LegalId
	}
	return ""
}

func (x *OrganizationInfo) GetDateOfRegistration() string {
	if x != nil {
		return x.DateOfRegistration
	}
	return ""
}

func (x *OrganizationInfo) GetRegistrationCountry() CountryCode {
	if x != nil {
		return x.RegistrationCountry
	}
	return CountryCode_UNKOWN
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Street     string `protobuf:"bytes,1,opt,name=street,proto3" json:"street,omitempty"`
	City       string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	PostalCode string `protobuf:"bytes,3,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	Country    string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_customer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_pb_customer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{10}
}

func (x *Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type ContactInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string                  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Type  ContactInfo_ContactType `protobuf:"varint,2,opt,name=type,proto3,enum=ContactInfo_ContactType" json:"type,omitempty"`
}

func (x *ContactInfo) Reset() {
	*x = ContactInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_customer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfo) ProtoMessage() {}

func (x *ContactInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_customer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfo.ProtoReflect.Descriptor instead.
func (*ContactInfo) Descriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{11}
}

func (x *ContactInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ContactInfo) GetType() ContactInfo_ContactType {
	if x != nil {
		return x.Type
	}
	return ContactInfo_OTHER
}

type TaxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxCountry CountryCode `protobuf:"varint,1,opt,name=tax_country,json=taxCountry,proto3,enum=CountryCode" json:"tax_country,omitempty"`
	TaxId      string      `protobuf:"bytes,2,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
}

func (x *TaxInfo) Reset() {
	*x = TaxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_customer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxInfo) ProtoMessage() {}

func (x *TaxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_customer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxInfo.ProtoReflect.Descriptor instead.
func (*TaxInfo) Descriptor() ([]byte, []int) {
	return file_pb_customer_proto_rawDescGZIP(), []int{12}
}

func (x *TaxInfo) GetTaxCountry() CountryCode {
	if x != nil {
		return x.TaxCountry
	}
	return CountryCode_UNKOWN
}

func (x *TaxInfo) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

var File_pb_customer_proto protoreflect.FileDescriptor

var file_pb_customer_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x62, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x11, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xa8, 0x01,
	0x0a, 0x13, 0x4e, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa8,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x22, 0xab, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x11,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x73, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x69,
	0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0xc8, 0x01, 0x0a, 0x10, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0x70, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x22, 0x4f, 0x0a, 0x07, 0x54, 0x61, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2d, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x2a, 0xb6, 0x12, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4b, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x42, 0x57, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x46, 0x47, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x47, 0x4f, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x49, 0x41, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x41, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x42, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44,
	0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x52, 0x45, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x47, 0x10, 0x0a, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x52, 0x4d, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x4d, 0x10, 0x0c, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x54, 0x41, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x54, 0x46, 0x10,
	0x0e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x54, 0x47, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x55,
	0x53, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x55, 0x54, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x5a, 0x45, 0x10, 0x12, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x44, 0x49, 0x10, 0x13, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x45, 0x4c, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x45, 0x4e, 0x10, 0x15,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x46, 0x41, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x44,
	0x10, 0x17, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x52, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x48, 0x52, 0x10, 0x19, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x48, 0x53, 0x10, 0x1a, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x49, 0x48, 0x10, 0x1b, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4c, 0x4d, 0x10, 0x1c, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x4c, 0x52, 0x10, 0x1d, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4c, 0x5a, 0x10,
	0x1e, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4d, 0x55, 0x10, 0x1f, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f,
	0x4c, 0x10, 0x20, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x41, 0x10, 0x21, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x52, 0x42, 0x10, 0x22, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x4e, 0x10, 0x23, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x54, 0x4e, 0x10, 0x24, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x56, 0x54, 0x10, 0x25,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x57, 0x41, 0x10, 0x26, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x46,
	0x10, 0x27, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x4e, 0x10, 0x28, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x43, 0x4b, 0x10, 0x29, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x48, 0x45, 0x10, 0x2a, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x48, 0x4c, 0x10, 0x2b, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x48, 0x4e, 0x10, 0x2c, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x49, 0x56, 0x10, 0x2d, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4d, 0x52, 0x10,
	0x2e, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f, 0x44, 0x10, 0x2f, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f,
	0x47, 0x10, 0x30, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f, 0x4b, 0x10, 0x31, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x4f, 0x4c, 0x10, 0x32, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f, 0x4d, 0x10, 0x33, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x50, 0x56, 0x10, 0x34, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x52, 0x49, 0x10, 0x35,
	0x12, 0x07, 0x0a, 0x03, 0x43, 0x55, 0x42, 0x10, 0x36, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x58, 0x52,
	0x10, 0x37, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x59, 0x4d, 0x10, 0x38, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x59, 0x50, 0x10, 0x39, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x5a, 0x45, 0x10, 0x3a, 0x12, 0x07, 0x0a,
	0x03, 0x44, 0x45, 0x55, 0x10, 0x3b, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4a, 0x49, 0x10, 0x3c, 0x12,
	0x07, 0x0a, 0x03, 0x44, 0x4d, 0x41, 0x10, 0x3d, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4e, 0x4b, 0x10,
	0x3e, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4f, 0x4d, 0x10, 0x3f, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x5a,
	0x41, 0x10, 0x40, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x43, 0x55, 0x10, 0x41, 0x12, 0x07, 0x0a, 0x03,
	0x45, 0x47, 0x59, 0x10, 0x42, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x52, 0x49, 0x10, 0x43, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x53, 0x48, 0x10, 0x44, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x53, 0x50, 0x10, 0x45,
	0x12, 0x07, 0x0a, 0x03, 0x45, 0x53, 0x54, 0x10, 0x46, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x54, 0x48,
	0x10, 0x47, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x49, 0x4e, 0x10, 0x48, 0x12, 0x07, 0x0a, 0x03, 0x46,
	0x4a, 0x49, 0x10, 0x49, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x4c, 0x4b, 0x10, 0x4a, 0x12, 0x07, 0x0a,
	0x03, 0x46, 0x52, 0x41, 0x10, 0x4b, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x4f, 0x10, 0x4c, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x53, 0x4d, 0x10, 0x4d, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x41, 0x42, 0x10,
	0x4e, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x42, 0x52, 0x10, 0x4f, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45,
	0x4f, 0x10, 0x50, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x47, 0x59, 0x10, 0x51, 0x12, 0x07, 0x0a, 0x03,
	0x47, 0x48, 0x41, 0x10, 0x52, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x49, 0x4e, 0x10, 0x53, 0x12, 0x07,
	0x0a, 0x03, 0x47, 0x49, 0x42, 0x10, 0x54, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x4c, 0x50, 0x10, 0x55,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x4d, 0x42, 0x10, 0x56, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x4e, 0x42,
	0x10, 0x57, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x4e, 0x51, 0x10, 0x58, 0x12, 0x07, 0x0a, 0x03, 0x47,
	0x52, 0x43, 0x10, 0x59, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x52, 0x44, 0x10, 0x5a, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x52, 0x4c, 0x10, 0x5b, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x4d, 0x10, 0x5c, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x55, 0x46, 0x10, 0x5d, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x55, 0x4d, 0x10,
	0x5e, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x55, 0x59, 0x10, 0x5f, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4b,
	0x47, 0x10, 0x60, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4d, 0x44, 0x10, 0x61, 0x12, 0x07, 0x0a, 0x03,
	0x48, 0x4e, 0x44, 0x10, 0x62, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x52, 0x56, 0x10, 0x63, 0x12, 0x07,
	0x0a, 0x03, 0x48, 0x54, 0x49, 0x10, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x55, 0x4e, 0x10, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x44, 0x4e, 0x10, 0x66, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4d, 0x4e,
	0x10, 0x67, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x44, 0x10, 0x68, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x4f, 0x54, 0x10, 0x69, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x52, 0x4c, 0x10, 0x6a, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x52, 0x4e, 0x10, 0x6b, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x52, 0x51, 0x10, 0x6c, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x53, 0x4c, 0x10, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x53, 0x52, 0x10,
	0x6e, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x54, 0x41, 0x10, 0x6f, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x41,
	0x4d, 0x10, 0x70, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x45, 0x59, 0x10, 0x71, 0x12, 0x07, 0x0a, 0x03,
	0x4a, 0x4f, 0x52, 0x10, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x50, 0x4e, 0x10, 0x73, 0x12, 0x07,
	0x0a, 0x03, 0x4b, 0x41, 0x5a, 0x10, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x4e, 0x10, 0x75,
	0x12, 0x07, 0x0a, 0x03, 0x4b, 0x47, 0x5a, 0x10, 0x76, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x48, 0x4d,
	0x10, 0x77, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x49, 0x52, 0x10, 0x78, 0x12, 0x07, 0x0a, 0x03, 0x4b,
	0x4e, 0x41, 0x10, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x4f, 0x52, 0x10, 0x7a, 0x12, 0x07, 0x0a,
	0x03, 0x4b, 0x57, 0x54, 0x10, 0x7b, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x41, 0x4f, 0x10, 0x7c, 0x12,
	0x07, 0x0a, 0x03, 0x4c, 0x42, 0x4e, 0x10, 0x7d, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x42, 0x52, 0x10,
	0x7e, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x42, 0x59, 0x10, 0x7f, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x43,
	0x41, 0x10, 0x80, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x49, 0x45, 0x10, 0x81, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x4c, 0x4b, 0x41, 0x10, 0x82, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x53, 0x4f, 0x10,
	0x83, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x54, 0x55, 0x10, 0x84, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x4c, 0x55, 0x58, 0x10, 0x85, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x56, 0x41, 0x10, 0x86, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x4d, 0x41, 0x43, 0x10, 0x87, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x41,
	0x46, 0x10, 0x88, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x41, 0x52, 0x10, 0x89, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x4d, 0x43, 0x4f, 0x10, 0x8a, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x44, 0x41, 0x10,
	0x8b, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x44, 0x47, 0x10, 0x8c, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x4d, 0x44, 0x56, 0x10, 0x8d, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x45, 0x58, 0x10, 0x8e, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x4d, 0x48, 0x4c, 0x10, 0x8f, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4b,
	0x44, 0x10, 0x90, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4c, 0x49, 0x10, 0x91, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x4d, 0x4c, 0x54, 0x10, 0x92, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4d, 0x52, 0x10,
	0x93, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4e, 0x45, 0x10, 0x94, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x4d, 0x4e, 0x47, 0x10, 0x95, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4e, 0x50, 0x10, 0x96, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4f, 0x5a, 0x10, 0x97, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x52,
	0x54, 0x10, 0x98, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x53, 0x52, 0x10, 0x99, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x4d, 0x54, 0x51, 0x10, 0x9a, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x55, 0x53, 0x10,
	0x9b, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x57, 0x49, 0x10, 0x9c, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x4d, 0x59, 0x53, 0x10, 0x9d, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x59, 0x54, 0x10, 0x9e, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x4e, 0x41, 0x4d, 0x10, 0x9f, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x43,
	0x4c, 0x10, 0xa0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x45, 0x52, 0x10, 0xa1, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x4e, 0x46, 0x4b, 0x10, 0xa2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x47, 0x41, 0x10,
	0xa3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x49, 0x43, 0x10, 0xa4, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x4e, 0x4f, 0x52, 0x10, 0xa5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x49, 0x55, 0x10, 0xa6, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x4e, 0x4c, 0x44, 0x10, 0xa7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x50,
	0x4c, 0x10, 0xa8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x52, 0x55, 0x10, 0xa9, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x4e, 0x5a, 0x4c, 0x10, 0xaa, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4f, 0x4d, 0x4e, 0x10,
	0xab, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x41, 0x4b, 0x10, 0xac, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x50, 0x41, 0x4e, 0x10, 0xad, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x43, 0x4e, 0x10, 0xae, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x50, 0x45, 0x52, 0x10, 0xaf, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x48,
	0x4c, 0x10, 0xb0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x4c, 0x57, 0x10, 0xb1, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x50, 0x4e, 0x47, 0x10, 0xb2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x4f, 0x4c, 0x10,
	0xb3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x52, 0x49, 0x10, 0xb4, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x50, 0x52, 0x4b, 0x10, 0xb5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x52, 0x54, 0x10, 0xb6, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x50, 0x52, 0x59, 0x10, 0xb7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x53,
	0x45, 0x10, 0xb8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x59, 0x46, 0x10, 0xb9, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x51, 0x41, 0x54, 0x10, 0xba, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x52, 0x45, 0x55, 0x10,
	0xbb, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x52, 0x4f, 0x55, 0x10, 0xbc, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x52, 0x55, 0x53, 0x10, 0xbd, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x52, 0x57, 0x41, 0x10, 0xbe, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x53, 0x41, 0x55, 0x10, 0xbf, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x44,
	0x4e, 0x10, 0xc0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x45, 0x4e, 0x10, 0xc1, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x53, 0x47, 0x50, 0x10, 0xc2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x47, 0x53, 0x10,
	0xc3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x48, 0x4e, 0x10, 0xc4, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x53, 0x4a, 0x4d, 0x10, 0xc5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x4c, 0x42, 0x10, 0xc6, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x53, 0x4c, 0x45, 0x10, 0xc7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x4c,
	0x56, 0x10, 0xc8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x4d, 0x52, 0x10, 0xc9, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x53, 0x4f, 0x4d, 0x10, 0xca, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x50, 0x4d, 0x10,
	0xcb, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x52, 0x42, 0x10, 0xcc, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x53, 0x54, 0x50, 0x10, 0xcd, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x55, 0x52, 0x10, 0xce, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x53, 0x56, 0x4b, 0x10, 0xcf, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x56,
	0x4e, 0x10, 0xd0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x57, 0x45, 0x10, 0xd1, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x53, 0x57, 0x5a, 0x10, 0xd2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x59, 0x43, 0x10,
	0xd3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x59, 0x52, 0x10, 0xd4, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x54, 0x43, 0x41, 0x10, 0xd5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x43, 0x44, 0x10, 0xd6, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x54, 0x47, 0x4f, 0x10, 0xd7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x48,
	0x41, 0x10, 0xd8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x4a, 0x4b, 0x10, 0xd9, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x54, 0x4b, 0x4c, 0x10, 0xda, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x4b, 0x4d, 0x10,
	0xdb, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x4c, 0x53, 0x10, 0xdc, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x54, 0x4f, 0x4e, 0x10, 0xdd, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x54, 0x4f, 0x10, 0xde, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x54, 0x55, 0x4e, 0x10, 0xdf, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x55,
	0x52, 0x10, 0xe0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x55, 0x56, 0x10, 0xe1, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x54, 0x57, 0x4e, 0x10, 0xe2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x5a, 0x41, 0x10,
	0xe3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x47, 0x41, 0x10, 0xe4, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x55, 0x4b, 0x52, 0x10, 0xe5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x4d, 0x49, 0x10, 0xe6, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x55, 0x52, 0x59, 0x10, 0xe7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x53,
	0x41, 0x10, 0xe8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x5a, 0x42, 0x10, 0xe9, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x56, 0x41, 0x54, 0x10, 0xea, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x43, 0x54, 0x10,
	0xeb, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x45, 0x4e, 0x10, 0xec, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x56, 0x47, 0x42, 0x10, 0xed, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x49, 0x52, 0x10, 0xee, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x56, 0x4e, 0x4d, 0x10, 0xef, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x55,
	0x54, 0x10, 0xf0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x57, 0x4c, 0x46, 0x10, 0xf1, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x57, 0x53, 0x4d, 0x10, 0xf2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x59, 0x45, 0x4d, 0x10,
	0xf3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x41, 0x46, 0x10, 0xf4, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x5a, 0x4d, 0x42, 0x10, 0xf5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x57, 0x45, 0x10, 0xf6, 0x01,
	0x32, 0xf4, 0x01, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x03, 0x4e, 0x65, 0x77, 0x12, 0x13, 0x2e, 0x4e,
	0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61, 0x63, 0x6f, 0x62, 0x61, 0x73, 0x2f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pb_customer_proto_rawDescOnce sync.Once
	file_pb_customer_proto_rawDescData = file_pb_customer_proto_rawDesc
)

func file_pb_customer_proto_rawDescGZIP() []byte {
	file_pb_customer_proto_rawDescOnce.Do(func() {
		file_pb_customer_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_customer_proto_rawDescData)
	})
	return file_pb_customer_proto_rawDescData
}

var file_pb_customer_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pb_customer_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_pb_customer_proto_goTypes = []interface{}{
	(CountryCode)(0),               // 0: CountryCode
	(ContactInfo_ContactType)(0),   // 1: ContactInfo.ContactType
	(*NewCustomerRequest)(nil),     // 2: NewCustomerRequest
	(*NewCustomerResponse)(nil),    // 3: NewCustomerResponse
	(*GetCustomerRequest)(nil),     // 4: GetCustomerRequest
	(*GetCustomerResponse)(nil),    // 5: GetCustomerResponse
	(*UpdateCustomerRequest)(nil),  // 6: UpdateCustomerRequest
	(*UpdateCustomerResponse)(nil), // 7: UpdateCustomerResponse
	(*DeleteCustomerRequest)(nil),  // 8: DeleteCustomerRequest
	(*DeleteCustomerResponse)(nil), // 9: DeleteCustomerResponse
	(*PersonInfo)(nil),             // 10: PersonInfo
	(*OrganizationInfo)(nil),       // 11: OrganizationInfo
	(*Address)(nil),                // 12: Address
	(*ContactInfo)(nil),            // 13: ContactInfo
	(*TaxInfo)(nil),                // 14: TaxInfo
}
var file_pb_customer_proto_depIdxs = []int32{
	10, // 0: NewCustomerRequest.person_info:type_name -> PersonInfo
	11, // 1: NewCustomerRequest.organization_info:type_name -> OrganizationInfo
	10, // 2: NewCustomerResponse.person_info:type_name -> PersonInfo
	11, // 3: NewCustomerResponse.organization_info:type_name -> OrganizationInfo
	10, // 4: GetCustomerResponse.person_info:type_name -> PersonInfo
	11, // 5: GetCustomerResponse.organization_info:type_name -> OrganizationInfo
	10, // 6: UpdateCustomerRequest.person_info:type_name -> PersonInfo
	11, // 7: UpdateCustomerRequest.organization_info:type_name -> OrganizationInfo
	10, // 8: UpdateCustomerResponse.person_info:type_name -> PersonInfo
	11, // 9: UpdateCustomerResponse.organization_info:type_name -> OrganizationInfo
	0,  // 10: PersonInfo.citizenship:type_name -> CountryCode
	0,  // 11: OrganizationInfo.registration_country:type_name -> CountryCode
	1,  // 12: ContactInfo.type:type_name -> ContactInfo.ContactType
	0,  // 13: TaxInfo.tax_country:type_name -> CountryCode
	2,  // 14: CustomerRegistry.New:input_type -> NewCustomerRequest
	4,  // 15: CustomerRegistry.Get:input_type -> GetCustomerRequest
	6,  // 16: CustomerRegistry.Update:input_type -> UpdateCustomerRequest
	8,  // 17: CustomerRegistry.Delete:input_type -> DeleteCustomerRequest
	3,  // 18: CustomerRegistry.New:output_type -> NewCustomerResponse
	5,  // 19: CustomerRegistry.Get:output_type -> GetCustomerResponse
	7,  // 20: CustomerRegistry.Update:output_type -> UpdateCustomerResponse
	9,  // 21: CustomerRegistry.Delete:output_type -> DeleteCustomerResponse
	18, // [18:22] is the sub-list for method output_type
	14, // [14:18] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_pb_customer_proto_init() }
func file_pb_customer_proto_init() {
	if File_pb_customer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_customer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_customer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewCustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_customer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_customer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_customer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_customer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_customer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_customer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_customer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_customer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_customer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_customer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_customer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pb_customer_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*NewCustomerRequest_PersonInfo)(nil),
		(*NewCustomerRequest_OrganizationInfo)(nil),
	}
	file_pb_customer_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*NewCustomerResponse_PersonInfo)(nil),
		(*NewCustomerResponse_OrganizationInfo)(nil),
	}
	file_pb_customer_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GetCustomerResponse_PersonInfo)(nil),
		(*GetCustomerResponse_OrganizationInfo)(nil),
	}
	file_pb_customer_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*UpdateCustomerRequest_PersonInfo)(nil),
		(*UpdateCustomerRequest_OrganizationInfo)(nil),
	}
	file_pb_customer_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*UpdateCustomerResponse_PersonInfo)(nil),
		(*UpdateCustomerResponse_OrganizationInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_customer_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_customer_proto_goTypes,
		DependencyIndexes: file_pb_customer_proto_depIdxs,
		EnumInfos:         file_pb_customer_proto_enumTypes,
		MessageInfos:      file_pb_customer_proto_msgTypes,
	}.Build()
	File_pb_customer_proto = out.File
	file_pb_customer_proto_rawDesc = nil
	file_pb_customer_proto_goTypes = nil
	file_pb_customer_proto_depIdxs = nil
}
